/*
 * This file is generated by jOOQ.
 */
package com.redstorm.rhine.jooq.tables.records;


import com.redstorm.rhine.jooq.tables.Lists;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListsRecord extends UpdatableRecordImpl<ListsRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.lists.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.lists.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.lists.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.lists.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.lists.owner</code>.
     */
    public void setOwner(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.lists.owner</code>.
     */
    public String getOwner() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Lists.LISTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Lists.LISTS.TITLE;
    }

    @Override
    public Field<String> field3() {
        return Lists.LISTS.OWNER;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getOwner();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getOwner();
    }

    @Override
    public ListsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ListsRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public ListsRecord value3(String value) {
        setOwner(value);
        return this;
    }

    @Override
    public ListsRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ListsRecord
     */
    public ListsRecord() {
        super(Lists.LISTS);
    }

    /**
     * Create a detached, initialised ListsRecord
     */
    public ListsRecord(Long id, String title, String owner) {
        super(Lists.LISTS);

        setId(id);
        setTitle(title);
        setOwner(owner);
        resetChangedOnNotNull();
    }
}
